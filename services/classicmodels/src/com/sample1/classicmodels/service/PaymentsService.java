/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.sample1.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.sample1.classicmodels.Payments;
import com.sample1.classicmodels.PaymentsId;

/**
 * Service object for domain model class {@link Payments}.
 */
public interface PaymentsService {

    /**
     * Creates a new Payments. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Payments if any.
     *
     * @param payments Details of the Payments to be created; value cannot be null.
     * @return The newly created Payments.
     */
	Payments create(Payments payments);


	/**
	 * Returns Payments by given id if exists.
	 *
	 * @param paymentsId The id of the Payments to get; value cannot be null.
	 * @return Payments associated with the given paymentsId.
     * @throws EntityNotFoundException If no Payments is found.
	 */
	Payments getById(PaymentsId paymentsId) throws EntityNotFoundException;

    /**
	 * Find and return the Payments by given id if exists, returns null otherwise.
	 *
	 * @param paymentsId The id of the Payments to get; value cannot be null.
	 * @return Payments associated with the given paymentsId.
	 */
	Payments findById(PaymentsId paymentsId);


	/**
	 * Updates the details of an existing Payments. It replaces all fields of the existing Payments with the given payments.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Payments if any.
     *
	 * @param payments The details of the Payments to be updated; value cannot be null.
	 * @return The updated Payments.
	 * @throws EntityNotFoundException if no Payments is found with given input.
	 */
	Payments update(Payments payments) throws EntityNotFoundException;

    /**
	 * Deletes an existing Payments with the given id.
	 *
	 * @param paymentsId The id of the Payments to be deleted; value cannot be null.
	 * @return The deleted Payments.
	 * @throws EntityNotFoundException if no Payments found with the given id.
	 */
	Payments delete(PaymentsId paymentsId) throws EntityNotFoundException;

	/**
	 * Find all Payments matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Payments.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Payments> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Payments matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Payments.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Payments> findAll(String query, Pageable pageable);

    /**
	 * Exports all Payments matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Payments in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Payments.
	 */
	long count(String query);


}

