/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.sample1.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.sample1.classicmodels.Orderdetails;
import com.sample1.classicmodels.OrderdetailsId;


/**
 * ServiceImpl object for domain model class Orderdetails.
 *
 * @see Orderdetails
 */
@Service("classicmodels.OrderdetailsService")
public class OrderdetailsServiceImpl implements OrderdetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OrderdetailsServiceImpl.class);


    @Autowired
    @Qualifier("classicmodels.OrderdetailsDao")
    private WMGenericDao<Orderdetails, OrderdetailsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Orderdetails, OrderdetailsId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
	public Orderdetails create(Orderdetails orderdetails) {
        LOGGER.debug("Creating a new Orderdetails with information: {}", orderdetails);
        Orderdetails orderdetailsCreated = this.wmGenericDao.create(orderdetails);
        return orderdetailsCreated;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Orderdetails getById(OrderdetailsId orderdetailsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Orderdetails by id: {}", orderdetailsId);
        Orderdetails orderdetails = this.wmGenericDao.findById(orderdetailsId);
        if (orderdetails == null){
            LOGGER.debug("No Orderdetails found with id: {}", orderdetailsId);
            throw new EntityNotFoundException(String.valueOf(orderdetailsId));
        }
        return orderdetails;
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Orderdetails findById(OrderdetailsId orderdetailsId) {
        LOGGER.debug("Finding Orderdetails by id: {}", orderdetailsId);
        return this.wmGenericDao.findById(orderdetailsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "classicmodelsTransactionManager")
	@Override
	public Orderdetails update(Orderdetails orderdetails) throws EntityNotFoundException {
        LOGGER.debug("Updating Orderdetails with information: {}", orderdetails);
        this.wmGenericDao.update(orderdetails);

        OrderdetailsId orderdetailsId = new OrderdetailsId();
        orderdetailsId.setOrderNumber(orderdetails.getOrderNumber());
        orderdetailsId.setProductCode(orderdetails.getProductCode());

        return this.wmGenericDao.findById(orderdetailsId);
    }

    @Transactional(value = "classicmodelsTransactionManager")
	@Override
	public Orderdetails delete(OrderdetailsId orderdetailsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Orderdetails with id: {}", orderdetailsId);
        Orderdetails deleted = this.wmGenericDao.findById(orderdetailsId);
        if (deleted == null) {
            LOGGER.debug("No Orderdetails found with id: {}", orderdetailsId);
            throw new EntityNotFoundException(String.valueOf(orderdetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Page<Orderdetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Orderdetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Orderdetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Orderdetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service classicmodels for table Orderdetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

