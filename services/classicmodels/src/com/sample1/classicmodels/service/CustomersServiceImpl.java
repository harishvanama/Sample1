/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.sample1.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.sample1.classicmodels.Customers;
import com.sample1.classicmodels.Payments;


/**
 * ServiceImpl object for domain model class Customers.
 *
 * @see Customers
 */
@Service("classicmodels.CustomersService")
public class CustomersServiceImpl implements CustomersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CustomersServiceImpl.class);

    @Autowired
	@Qualifier("classicmodels.PaymentsService")
	private PaymentsService paymentsService;

    @Autowired
    @Qualifier("classicmodels.CustomersDao")
    private WMGenericDao<Customers, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Customers, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
	public Customers create(Customers customers) {
        LOGGER.debug("Creating a new Customers with information: {}", customers);
        Customers customersCreated = this.wmGenericDao.create(customers);
        if(customersCreated.getPaymentses() != null) {
            for(Payments paymentse : customersCreated.getPaymentses()) {
                paymentse.setCustomers(customersCreated);
                LOGGER.debug("Creating a new child Payments with information: {}", paymentse);
                paymentsService.create(paymentse);
            }
        }
        return customersCreated;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Customers getById(Integer customersId) throws EntityNotFoundException {
        LOGGER.debug("Finding Customers by id: {}", customersId);
        Customers customers = this.wmGenericDao.findById(customersId);
        if (customers == null){
            LOGGER.debug("No Customers found with id: {}", customersId);
            throw new EntityNotFoundException(String.valueOf(customersId));
        }
        return customers;
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Customers findById(Integer customersId) {
        LOGGER.debug("Finding Customers by id: {}", customersId);
        return this.wmGenericDao.findById(customersId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "classicmodelsTransactionManager")
	@Override
	public Customers update(Customers customers) throws EntityNotFoundException {
        LOGGER.debug("Updating Customers with information: {}", customers);
        this.wmGenericDao.update(customers);

        Integer customersId = customers.getCustomerNumber();

        return this.wmGenericDao.findById(customersId);
    }

    @Transactional(value = "classicmodelsTransactionManager")
	@Override
	public Customers delete(Integer customersId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Customers with id: {}", customersId);
        Customers deleted = this.wmGenericDao.findById(customersId);
        if (deleted == null) {
            LOGGER.debug("No Customers found with id: {}", customersId);
            throw new EntityNotFoundException(String.valueOf(customersId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Page<Customers> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Customers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Customers> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Customers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service classicmodels for table Customers to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Payments> findAssociatedPaymentses(Integer customerNumber, Pageable pageable) {
        LOGGER.debug("Fetching all associated paymentses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("customers.customerNumber = '" + customerNumber + "'");

        return paymentsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PaymentsService instance
	 */
	protected void setPaymentsService(PaymentsService service) {
        this.paymentsService = service;
    }

}

