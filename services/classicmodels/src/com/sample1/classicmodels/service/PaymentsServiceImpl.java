/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.sample1.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.sample1.classicmodels.Payments;
import com.sample1.classicmodels.PaymentsId;


/**
 * ServiceImpl object for domain model class Payments.
 *
 * @see Payments
 */
@Service("classicmodels.PaymentsService")
public class PaymentsServiceImpl implements PaymentsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentsServiceImpl.class);


    @Autowired
    @Qualifier("classicmodels.PaymentsDao")
    private WMGenericDao<Payments, PaymentsId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Payments, PaymentsId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
	public Payments create(Payments payments) {
        LOGGER.debug("Creating a new Payments with information: {}", payments);
        Payments paymentsCreated = this.wmGenericDao.create(payments);
        return paymentsCreated;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Payments getById(PaymentsId paymentsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Payments by id: {}", paymentsId);
        Payments payments = this.wmGenericDao.findById(paymentsId);
        if (payments == null){
            LOGGER.debug("No Payments found with id: {}", paymentsId);
            throw new EntityNotFoundException(String.valueOf(paymentsId));
        }
        return payments;
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Payments findById(PaymentsId paymentsId) {
        LOGGER.debug("Finding Payments by id: {}", paymentsId);
        return this.wmGenericDao.findById(paymentsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "classicmodelsTransactionManager")
	@Override
	public Payments update(Payments payments) throws EntityNotFoundException {
        LOGGER.debug("Updating Payments with information: {}", payments);
        this.wmGenericDao.update(payments);

        PaymentsId paymentsId = new PaymentsId();
        paymentsId.setCheckNumber(payments.getCheckNumber());
        paymentsId.setCustomerNumber(payments.getCustomerNumber());

        return this.wmGenericDao.findById(paymentsId);
    }

    @Transactional(value = "classicmodelsTransactionManager")
	@Override
	public Payments delete(PaymentsId paymentsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Payments with id: {}", paymentsId);
        Payments deleted = this.wmGenericDao.findById(paymentsId);
        if (deleted == null) {
            LOGGER.debug("No Payments found with id: {}", paymentsId);
            throw new EntityNotFoundException(String.valueOf(paymentsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Page<Payments> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Payments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Payments> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Payments");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service classicmodels for table Payments to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

