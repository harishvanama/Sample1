/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.sample1.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.sample1.classicmodels.Customers;
import com.sample1.classicmodels.Employees;


/**
 * ServiceImpl object for domain model class Employees.
 *
 * @see Employees
 */
@Service("classicmodels.EmployeesService")
public class EmployeesServiceImpl implements EmployeesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeesServiceImpl.class);

    @Autowired
	@Qualifier("classicmodels.CustomersService")
	private CustomersService customersService;

    @Autowired
    @Qualifier("classicmodels.EmployeesDao")
    private WMGenericDao<Employees, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Employees, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
	public Employees create(Employees employees) {
        LOGGER.debug("Creating a new Employees with information: {}", employees);
        Employees employeesCreated = this.wmGenericDao.create(employees);
        if(employeesCreated.getCustomerses() != null) {
            for(Customers customerse : employeesCreated.getCustomerses()) {
                customerse.setEmployees(employeesCreated);
                LOGGER.debug("Creating a new child Customers with information: {}", customerse);
                customersService.create(customerse);
            }
        }

        if(employeesCreated.getEmployeesesForReportsTo() != null) {
            for(Employees employeesesForReportsTo : employeesCreated.getEmployeesesForReportsTo()) {
                employeesesForReportsTo.setEmployeesByReportsTo(employeesCreated);
                LOGGER.debug("Creating a new child Employees with information: {}", employeesesForReportsTo);
                create(employeesesForReportsTo);
            }
        }
        return employeesCreated;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Employees getById(Integer employeesId) throws EntityNotFoundException {
        LOGGER.debug("Finding Employees by id: {}", employeesId);
        Employees employees = this.wmGenericDao.findById(employeesId);
        if (employees == null){
            LOGGER.debug("No Employees found with id: {}", employeesId);
            throw new EntityNotFoundException(String.valueOf(employeesId));
        }
        return employees;
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Employees findById(Integer employeesId) {
        LOGGER.debug("Finding Employees by id: {}", employeesId);
        return this.wmGenericDao.findById(employeesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "classicmodelsTransactionManager")
	@Override
	public Employees update(Employees employees) throws EntityNotFoundException {
        LOGGER.debug("Updating Employees with information: {}", employees);
        this.wmGenericDao.update(employees);

        Integer employeesId = employees.getEmployeeNumber();

        return this.wmGenericDao.findById(employeesId);
    }

    @Transactional(value = "classicmodelsTransactionManager")
	@Override
	public Employees delete(Integer employeesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Employees with id: {}", employeesId);
        Employees deleted = this.wmGenericDao.findById(employeesId);
        if (deleted == null) {
            LOGGER.debug("No Employees found with id: {}", employeesId);
            throw new EntityNotFoundException(String.valueOf(employeesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public Page<Employees> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Employees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Employees> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Employees");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service classicmodels for table Employees to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "classicmodelsTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Customers> findAssociatedCustomerses(Integer employeeNumber, Pageable pageable) {
        LOGGER.debug("Fetching all associated customerses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("employees.employeeNumber = '" + employeeNumber + "'");

        return customersService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Employees> findAssociatedEmployeesesForReportsTo(Integer employeeNumber, Pageable pageable) {
        LOGGER.debug("Fetching all associated employeesesForReportsTo");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("employeesByReportsTo.employeeNumber = '" + employeeNumber + "'");

        return findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CustomersService instance
	 */
	protected void setCustomersService(CustomersService service) {
        this.customersService = service;
    }

}

