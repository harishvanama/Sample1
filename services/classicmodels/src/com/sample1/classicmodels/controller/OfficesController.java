/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.sample1.classicmodels.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.sample1.classicmodels.Employees;
import com.sample1.classicmodels.Offices;
import com.sample1.classicmodels.service.OfficesService;


/**
 * Controller object for domain model class Offices.
 * @see Offices
 */
@RestController("classicmodels.OfficesController")
@Api(value = "OfficesController", description = "Exposes APIs to work with Offices resource.")
@RequestMapping("/classicmodels/Offices")
public class OfficesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(OfficesController.class);

    @Autowired
	@Qualifier("classicmodels.OfficesService")
	private OfficesService officesService;

	@ApiOperation(value = "Creates a new Offices instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Offices createOffices(@RequestBody Offices offices) {
		LOGGER.debug("Create Offices with information: {}" , offices);

		offices = officesService.create(offices);
		LOGGER.debug("Created Offices with information: {}" , offices);

	    return offices;
	}


    @ApiOperation(value = "Returns the Offices instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Offices getOffices(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Offices with id: {}" , id);

        Offices foundOffices = officesService.getById(id);
        LOGGER.debug("Offices details with id: {}" , foundOffices);

        return foundOffices;
    }

    @ApiOperation(value = "Updates the Offices instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Offices editOffices(@PathVariable("id") String id, @RequestBody Offices offices) throws EntityNotFoundException {
        LOGGER.debug("Editing Offices with id: {}" , offices.getOfficeCode());

        offices.setOfficeCode(id);
        offices = officesService.update(offices);
        LOGGER.debug("Offices details with id: {}" , offices);

        return offices;
    }

    @ApiOperation(value = "Deletes the Offices instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOffices(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Offices with id: {}" , id);

        Offices deletedOffices = officesService.delete(id);

        return deletedOffices != null;
    }

    /**
     * @deprecated Use {@link #findOffices(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Offices instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Offices> searchOfficesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Offices list");
        return officesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Offices instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Offices> findOffices(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Offices list");
        return officesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Offices instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Offices> filterOffices(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Offices list");
        return officesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOffices(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return officesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Offices instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOffices( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Offices");
		return officesService.count(query);
	}

    @RequestMapping(value="/{id:.+}/employeeses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Employees> findAssociatedEmployeeses(@PathVariable("id") String id, Pageable pageable) {

        LOGGER.debug("Fetching all associated employeeses");
        return officesService.findAssociatedEmployeeses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OfficesService instance
	 */
	protected void setOfficesService(OfficesService service) {
		this.officesService = service;
	}

}

