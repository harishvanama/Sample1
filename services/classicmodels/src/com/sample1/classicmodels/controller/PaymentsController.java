/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.sample1.classicmodels.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.sample1.classicmodels.Payments;
import com.sample1.classicmodels.PaymentsId;
import com.sample1.classicmodels.service.PaymentsService;


/**
 * Controller object for domain model class Payments.
 * @see Payments
 */
@RestController("classicmodels.PaymentsController")
@Api(value = "PaymentsController", description = "Exposes APIs to work with Payments resource.")
@RequestMapping("/classicmodels/Payments")
public class PaymentsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentsController.class);

    @Autowired
	@Qualifier("classicmodels.PaymentsService")
	private PaymentsService paymentsService;

	@ApiOperation(value = "Creates a new Payments instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Payments createPayments(@RequestBody Payments payments) {
		LOGGER.debug("Create Payments with information: {}" , payments);

		payments = paymentsService.create(payments);
		LOGGER.debug("Created Payments with information: {}" , payments);

	    return payments;
	}

    @ApiOperation(value = "Returns the Payments instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Payments getPayments(@RequestParam("checkNumber") String checkNumber,@RequestParam("customerNumber") Integer customerNumber) throws EntityNotFoundException {

        PaymentsId paymentsId = new PaymentsId();
        paymentsId.setCheckNumber(checkNumber);
        paymentsId.setCustomerNumber(customerNumber);

        LOGGER.debug("Getting Payments with id: {}" , paymentsId);
        Payments payments = paymentsService.getById(paymentsId);
        LOGGER.debug("Payments details with id: {}" , payments);

        return payments;
    }



    @ApiOperation(value = "Updates the Payments instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Payments editPayments(@RequestParam("checkNumber") String checkNumber,@RequestParam("customerNumber") Integer customerNumber, @RequestBody Payments payments) throws EntityNotFoundException {

        payments.setCheckNumber(checkNumber);
        payments.setCustomerNumber(customerNumber);

        LOGGER.debug("Payments details with id is updated with: {}" , payments);

        return paymentsService.update(payments);
    }


    @ApiOperation(value = "Deletes the Payments instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePayments(@RequestParam("checkNumber") String checkNumber,@RequestParam("customerNumber") Integer customerNumber) throws EntityNotFoundException {

        PaymentsId paymentsId = new PaymentsId();
        paymentsId.setCheckNumber(checkNumber);
        paymentsId.setCustomerNumber(customerNumber);

        LOGGER.debug("Deleting Payments with id: {}" , paymentsId);
        Payments payments = paymentsService.delete(paymentsId);

        return payments != null;
    }


    /**
     * @deprecated Use {@link #findPayments(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Payments instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Payments> searchPaymentsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Payments list");
        return paymentsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Payments instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Payments> findPayments(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Payments list");
        return paymentsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Payments instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Payments> filterPayments(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Payments list");
        return paymentsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPayments(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return paymentsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Payments instances matching the optional query (q) request param.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPayments( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Payments");
		return paymentsService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PaymentsService instance
	 */
	protected void setPaymentsService(PaymentsService service) {
		this.paymentsService = service;
	}

}

